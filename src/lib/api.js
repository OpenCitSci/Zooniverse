// Generated by CoffeeScript 1.4.0
(function() {
  var $, ProxyFrame, api, id, _ref,
    __slice = [].slice;

  if ((_ref = window.zooniverse) == null) {
    window.zooniverse = {};
  }

  ProxyFrame = window.zooniverse.ProxyFrame || require('./proxy-frame');

  $ = window.jQuery;

  id = -1;

  api = {
    project: '.',
    headers: {},
    proxy: null,
    messages: {},
    ready: false,
    get: function() {
      return this.request.apply(this, ['get'].concat(__slice.call(arguments)));
    },
    getJSON: function() {
      return this.request.apply(this, ['getJSON'].concat(__slice.call(arguments)));
    },
    post: function() {
      return this.request.apply(this, ['post'].concat(__slice.call(arguments)));
    },
    put: function() {
      return this.request.apply(this, ['put'].concat(__slice.call(arguments)));
    },
    "delete": function() {
      return this.request.apply(this, ['delete'].concat(__slice.call(arguments)));
    },
    init: function(_arg) {
      var host, path,
        _this = this;
      host = _arg.host, path = _arg.path, this.project = _arg.project;
      if (this.proxy) {
        return;
      }
      this.proxy = new ProxyFrame(host, path);
      console.log({
        proxy: this.proxy
      });
      this.proxy.one('ready', function() {
        return _this.onProxyReady.apply(_this, arguments);
      });
      return this.proxy.on('response', function() {
        return _this.onProxyResponse.apply(_this, arguments);
      });
    },
    onProxyReady: function() {
      var message, _ref1, _results;
      console.log("On proxy ready");
      this.ready = true;
      _ref1 = this.messages;
      _results = [];
      for (id in _ref1) {
        message = _ref1[id];
        _results.push(this.process(id));
      }
      return _results;
    },
    request: function(type, url, data, done, fail) {
      var deferred, message, _ref1;
      if (typeof data === 'function') {
        _ref1 = [done, data, null], fail = _ref1[0], done = _ref1[1], data = _ref1[2];
      }
      deferred = new $.Deferred;
      deferred.done(done);
      deferred.fail(fail);
      id += 1;
      message = {
        id: id,
        type: type,
        url: url,
        data: data,
        deferred: deferred,
        headers: this.headers
      };
      this.messages[id] = message;
      if (this.ready) {
        this.process(id);
      }
      return deferred.promise();
    },
    process: function(id) {
      var data, type, url, _ref1;
      _ref1 = this.messages[id], id = _ref1.id, type = _ref1.type, url = _ref1.url, data = _ref1.data;
      return this.proxy.send({
        id: id,
        type: type,
        url: url,
        data: data
      });
    },
    onProxyResponse: function(e, result) {
      var message;
      message = this.messages[result.id];
      if (result.failure) {
        message.deferred.reject(result.response);
      } else {
        message.deferred.resolve(result.response);
      }
      return delete this.messages[result.id];
    }
  };

  window.zooniverse.api = api;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = api;
  }

}).call(this);
