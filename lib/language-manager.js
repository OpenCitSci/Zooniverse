// Generated by CoffeeScript 1.6.3
(function() {
  var $, DEFAULT_LANGUAGE_CODE, EventEmitter, LanguageManager, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = ((_ref = window.zooniverse) != null ? _ref.EventEmitter : void 0) || require('./event-emitter');

  $ = window.jQuery;

  DEFAULT_LANGUAGE_CODE = 'en';

  LanguageManager = (function(_super) {
    __extends(LanguageManager, _super);

    LanguageManager.current = null;

    LanguageManager.prototype.translations = null;

    function LanguageManager(_arg) {
      var code, _ref1, _ref2, _ref3, _ref4,
        _this = this;
      _ref1 = _arg != null ? _arg : {}, this.translations = _ref1.translations, code = _ref1.code;
      if (this.translations == null) {
        this.translations = window.AVAILABLE_TRANSLATIONS || {};
      }
      code || (code = (_ref2 = location.search.match(/lang=(\w+)/)) != null ? _ref2[1] : void 0);
      code || (code = localStorage.getItem('zooniverse-language-code'));
      code || (code = (_ref3 = navigator.language) != null ? _ref3.split('-')[0] : void 0);
      code || (code = (_ref4 = navigator.userLanguage) != null ? _ref4.split('-')[0] : void 0);
      code || (code = DEFAULT_LANGUAGE_CODE);
      this.constructor.current = this;
      setTimeout(function() {
        return _this.setLanguage(code);
      });
    }

    LanguageManager.prototype.setLanguage = function(code, done, fail) {
      var localStrings, request, _ref1,
        _this = this;
      if (typeof ((_ref1 = this.translations[code]) != null ? _ref1.strings : void 0) === 'string') {
        localStrings = JSON.parse(localStorage.getItem("zooniverse-language-strings-" + code));
        if (localStrings != null) {
          this.translations[code].strings = localStrings;
          return this.setLanguage(code, done, fail);
        } else {
          request = $.getJSON(this.translations[code].strings);
          request.done(function(data) {
            localStorage.setItem("zooniverse-language-strings-" + code, JSON.stringify(data));
            _this.translations[code].strings = data;
            return _this.setLanguage(code, done, fail);
          });
          return request.fail(function() {
            _this.trigger('language-fetch-fail');
            return typeof fail === "function" ? fail.apply(null, arguments) : void 0;
          });
        }
      } else {
        localStorage.setItem('zooniverse-language-code', code);
        this.trigger('change-language', [code, this.translations[code].strings]);
        return typeof done === "function" ? done(code, this.translations[code].strings) : void 0;
      }
    };

    return LanguageManager;

  })(EventEmitter);

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  window.zooniverse.LanguageManager = LanguageManager;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = LanguageManager;
  }

}).call(this);
