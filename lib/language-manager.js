// Generated by CoffeeScript 1.6.3
(function() {
  var $, DEFAULT_LOCALE, EventEmitter, LanguageManager, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EventEmitter = ((_ref = window.zooniverse) != null ? _ref.EventEmitter : void 0) || require('./event-emitter');

  $ = window.jQuery;

  DEFAULT_LOCALE = 'en';

  LanguageManager = (function(_super) {
    __extends(LanguageManager, _super);

    LanguageManager.current = null;

    LanguageManager.prototype.translations = null;

    LanguageManager.prototype.code = null;

    function LanguageManager(params) {
      this.defaultStringsFormat = __bind(this.defaultStringsFormat, this);
      this.label = __bind(this.label, this);
      var property, value, _base, _name, _ref1, _ref2, _ref3,
        _this = this;
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      if (this.translations == null) {
        this.translations = {};
      }
      if (this.code == null) {
        this.code = (_ref1 = location.search.match(/lang=([^&]+)/)) != null ? _ref1[1] : void 0;
      }
      if (this.code == null) {
        this.code = localStorage.getItem('zooniverse-language-code');
      }
      if (this.code == null) {
        this.code = (_ref2 = navigator.language) != null ? _ref2.split('-')[0] : void 0;
      }
      if (this.code == null) {
        this.code = (_ref3 = navigator.userLanguage) != null ? _ref3.split('-')[0] : void 0;
      }
      if (this.code == null) {
        this.code = this.constructor.prototype.code;
      }
      if (__indexOf.call(this.code, '/') >= 0 || __indexOf.call(this.code, '.json') >= 0) {
        if ((_base = this.translations)[_name = this.code] == null) {
          _base[_name] = {
            label: this.code,
            strings: this.code
          };
        }
      }
      this.constructor.current = this;
      setTimeout(function() {
        return _this.setLanguage(_this.code);
      });
    }

    LanguageManager.prototype.setLanguage = function(code, done, fail) {
      var localStrings, pathToStrings, request, _ref1,
        _this = this;
      this.code = code;
      if (this.translations[this.code] == null) {
        this.code = DEFAULT_LOCALE;
      }
      if (this.translations[this.code].strings == null) {
        this.translations[this.code].strings = this.defaultStringsFormat();
      }
      if (typeof this.translations[this.code].strings === 'string') {
        pathToStrings = (_ref1 = this.translations[this.code]) != null ? _ref1.strings : void 0;
        localStrings = JSON.parse(localStorage.getItem("zooniverse-language-strings-" + this.code));
        if (localStrings != null) {
          this.translations[this.code].strings = localStrings;
          this.setLanguage(this.code, done, fail);
        }
        request = $.getJSON(pathToStrings);
        request.done(function(data) {
          localStorage.setItem("zooniverse-language-strings-" + _this.code, JSON.stringify(data));
          _this.translations[_this.code].strings = data;
          return _this.setLanguage(_this.code, done, fail);
        });
        return request.fail(function() {
          _this.trigger('language-fetch-fail');
          return typeof fail === "function" ? fail.apply(null, arguments) : void 0;
        });
      } else {
        localStorage.setItem('zooniverse-language-code', this.code);
        document.querySelector('html').lang = this.code;
        this.trigger('change-language', [this.code, this.translations[this.code].strings]);
        return typeof done === "function" ? done(this.code, this.translations[this.code].strings) : void 0;
      }
    };

    LanguageManager.prototype.label = function() {
      var _ref1, _ref2;
      return ((_ref1 = this.translations[this.code]) != null ? _ref1.label : void 0) || ((_ref2 = this.translations[this.constructor.prototype.code]) != null ? _ref2.label : void 0);
    };

    LanguageManager.prototype.defaultStringsFormat = function() {
      return "./translations/" + this.code + ".json";
    };

    return LanguageManager;

  })(EventEmitter);

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  window.zooniverse.LanguageManager = LanguageManager;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = LanguageManager;
  }

}).call(this);
