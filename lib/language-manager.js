// Generated by CoffeeScript 1.6.3
(function() {
  var $, DEFAULT_LANGUAGE_CODE, EventEmitter, HTML, LanguageManager, _base, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = ((_ref = window.zooniverse) != null ? _ref.EventEmitter : void 0) || require('./event-emitter');

  $ = window.jQuery;

  HTML = $(document.body.parentNode);

  DEFAULT_LANGUAGE_CODE = 'en';

  LanguageManager = (function(_super) {
    __extends(LanguageManager, _super);

    LanguageManager.current = null;

    LanguageManager.prototype.availableLanguages = {};

    LanguageManager.prototype.preferredLanguage = null;

    function LanguageManager() {
      LanguageManager.__super__.constructor.apply(this, arguments);
      if (!(this.preferredLanguage = ((function() {
        try {
          return location.search.match(/lang=([\$|\w]+)/)[1];
        } catch (_error) {}
      })()))) {
        if (localStorage.preferredLanguage != null) {
          this.preferredLanguage || (this.preferredLanguage = localStorage.preferredLanguage);
        }
        this.preferredLanguage || (this.preferredLanguage = DEFAULT_LANGUAGE_CODE);
      }
      HTML.attr('data-language', this.preferredLanguage);
      this.select();
      this.setLanguage(this.preferredLanguage);
    }

    LanguageManager.prototype.getAvailableLanguages = function() {
      return window.DEFINE_ZOONIVERSE_LANGUAGES || {
        'en': 'English'
      };
    };

    LanguageManager.prototype.getPreferredLanguage = function() {
      return this.preferredLanguage;
    };

    LanguageManager.prototype.setLanguage = function(languageCode, callback) {
      var request,
        _this = this;
      request = $.getJSON("./translations/" + languageCode + ".json");
      request.done(function(data) {
        _this.preferredLanguage = languageCode;
        localStorage.preferredLanguage = _this.preferredLanguage;
        localStorage.langaugeStrings = JSON.stringify(data);
        _this.trigger('language-fetched', data);
        return typeof callback === "function" ? callback.apply(null, arguments) : void 0;
      });
      return request.fail(function() {
        _this.trigger('language-fetch-fail');
        return typeof callback === "function" ? callback.apply(null, arguments) : void 0;
      });
    };

    LanguageManager.prototype.select = function() {
      this.constructor.current = this;
      return this.trigger('select');
    };

    return LanguageManager;

  })(EventEmitter);

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  if ((_base = window.zooniverse).lib == null) {
    _base.lib = {};
  }

  window.zooniverse.lib.LanguageManager = LanguageManager;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = LanguageManager;
  }

}).call(this);
