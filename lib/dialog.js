// Generated by CoffeeScript 1.3.3
(function() {
  var $, Dialog,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  $ = require('jqueryify');

  Dialog = (function() {

    Dialog.Button = (function() {

      Button.prototype.label = 'OK';

      Button.prototype.value = null;

      Button.prototype.tag = 'button';

      Button.prototype.className = 'dialog-button';

      Button.prototype.dialog = null;

      Button.prototype.el = null;

      function Button(params) {
        var property, value, _ref,
          _this = this;
        if (params == null) {
          params = {};
        }
        for (property in params) {
          if (!__hasProp.call(params, property)) continue;
          value = params[property];
          this[property] = value;
        }
        if ((_ref = this.el) == null) {
          this.el = $("<" + this.tag + " class='" + this.className + "'>" + this.label + "</" + this.tag + ">");
        }
        this.el.on('click', function() {
          _this.dialog.deferred.resolve(_this.value);
          return _this.onClick();
        });
      }

      Button.prototype.onClick = function() {};

      return Button;

    })();

    Dialog.prototype.title = '';

    Dialog.prototype.content = 'Lorem ipsum dolor sit amet.';

    Dialog.prototype.buttons = null;

    Dialog.prototype.callback = null;

    Dialog.prototype.className = 'dialog';

    Dialog.prototype.el = null;

    Dialog.prototype.underlay = null;

    Dialog.prototype.deferred = null;

    Dialog.prototype.promise = null;

    function Dialog(params) {
      var button, i, label, property, value, _i, _len, _ref, _ref1;
      if (params == null) {
        params = {};
      }
      this.close = __bind(this.close, this);

      this.open = __bind(this.open, this);

      this.render = __bind(this.render, this);

      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        this[property] = value;
      }
      if ((_ref = this.buttons) == null) {
        this.buttons = [
          new this.constructor.Button({
            label: 'OK',
            value: true
          })
        ];
      }
      _ref1 = this.buttons;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        button = _ref1[i];
        if (!(button instanceof this.constructor.Button)) {
          for (label in button) {
            if (!__hasProp.call(button, label)) continue;
            value = button[label];
            this.buttons[i] = new this.constructor.Button({
              label: label,
              value: value
            });
          }
        }
        this.buttons[i].dialog = this;
      }
      this.render();
      this.el.appendTo('body');
    }

    Dialog.prototype.render = function() {
      var button, contentContainer, _i, _len, _ref, _results;
      this.el = $("<div class=\"" + this.className + "-underlay\">\n  <div class=\"" + this.className + "\">\n    <header>" + this.title + "</header>\n    <div class=\"content\"></div>\n    <footer></footer>\n  </div>\n</div>");
      contentContainer = this.el.find('.content');
      if (this.content instanceof $) {
        contentContainer.append(this.content);
      } else {
        contentContainer.append($("<p>" + this.content + "</p>"));
      }
      _ref = this.buttons;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        _results.push(button.el.appendTo(this.el.find('footer')));
      }
      return _results;
    };

    Dialog.prototype.open = function() {
      this.el.addClass('open');
      this.deferred = new $.Deferred;
      if (this.callback != null) {
        this.deferred.then(this.callback);
      }
      this.deferred.then(this.close);
      return this.promise = this.deferred.promise();
    };

    Dialog.prototype.close = function() {
      this.el.removeClass('open');
      this.deferred = null;
      return this.promise = null;
    };

    return Dialog;

  })();

  module.exports = Dialog;

}).call(this);
