// Generated by CoffeeScript 1.4.0
(function() {
  var $, BrowserCheck,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  $ = require('jqueryify');

  BrowserCheck = (function() {

    BrowserCheck.prototype.view = "<div class=\"zooniverse-browser-warning\">\n  <section>\n    <div class=\"summary\">\n      <p>" + (I18n.t('zooniverse.browser_check.wont_work')) + "</p>\n    </div>\n\n    <div class=\"recommend\">\n      <p>" + (I18n.t('zooniverse.browser_check.recommended')) + "</p>\n    </div>\n\n    <div class=\"ie\">\n      <p>" + (I18n.t('zooniverse.browser_check.ie')) + "</p>\n      <p>" + (I18n.t('zooniverse.browser_check.chrome_frame')) + "</p>\n    </div>\n\n    <div class=\"action\">\n      <p><button name=\"dismiss\">" + (I18n.t('zooniverse.browser_check.dismiss')) + "</button></p>\n    </div>\n  </section>\n</div>";

    BrowserCheck.prototype.support = {
      mozilla: 14,
      msie: 8,
      webkit: 530,
      opera: Infinity
    };

    function BrowserCheck(params) {
      var property, value, _ref;
      if (params == null) {
        params = {};
      }
      this.dismiss = __bind(this.dismiss, this);

      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        this[property] = value;
      }
      if ((_ref = this.el) == null) {
        this.el = $(this.view);
      }
      this.el.on('click', 'button[name="dismiss"]', this.dismiss);
    }

    BrowserCheck.prototype.check = function() {
      if (!this.supported()) {
        return this.warn();
      }
    };

    BrowserCheck.prototype.supported = function() {
      var supportedVersion, vendor, version;
      version = parseFloat($.browser.version);
      for (vendor in $.browser) {
        if (vendor in this.support) {
          supportedVersion = this.support[vendor];
        }
      }
      return version >= supportedVersion;
    };

    BrowserCheck.prototype.warn = function() {
      return this.el.appendTo('body');
    };

    BrowserCheck.prototype.dismiss = function() {
      return this.el.remove();
    };

    return BrowserCheck;

  })();

  module.exports = BrowserCheck;

}).call(this);
