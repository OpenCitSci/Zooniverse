// Generated by CoffeeScript 1.3.3
(function() {
  var Api, Model, ProxyFrame, User,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require('./model');

  Api = require('../api');

  ProxyFrame = require('../proxy_frame');

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.configure('User');

    User.project = 'Not Specified';

    User.fetch = function() {
      var fetcher;
      fetcher = Api.getJSON('/current_user', this.createUser);
      fetcher.always(this.setAuthHeaders);
      return fetcher;
    };

    User.setAuthHeaders = function() {
      var auth;
      if (User.current) {
        auth = base64.encode("" + User.current.name + ":" + User.current.apiKey);
        return ProxyFrame.headers['Authorization'] = "Basic " + auth;
      } else {
        return delete ProxyFrame.headers['Authorization'];
      }
    };

    User.login = function(_arg) {
      var login, password, username;
      username = _arg.username, password = _arg.password;
      login = Api.getJSON("projects/" + this.project + "/login", {
        username: username,
        password: password
      }, this.createUser);
      login.always(this.setAuthHeaders);
      return login;
    };

    User.logout = function() {
      var logout;
      logout = Api.getJSON('/logout', function(result) {
        if (result.success) {
          User.current = null;
        }
        return User.trigger('sign-in', this);
      });
      logout.always(this.setAuthHeaders);
      return logout;
    };

    User.signup = function(_arg) {
      var email, password, signup, username;
      username = _arg.username, password = _arg.password, email = _arg.email;
      signup = Api.getJSON('/signup', {
        username: username,
        email: email,
        password: password
      }, this.createUser);
      signup.always(this.setAuthHeaders);
      return signup;
    };

    User.createUser = function(result) {
      return User.current = result.success ? (delete result.success, User.trigger('sign-in', this), new User(result)) : (User.trigger('sign-in-error', result.message), null);
    };

    return User;

  })(Model);

  module.exports = User;

}).call(this);
