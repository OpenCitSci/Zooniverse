// Generated by CoffeeScript 1.4.0
(function() {
  var $, EventEmitter, _ref,
    __hasProp = {}.hasOwnProperty;

  if ((_ref = window.zooniverse) == null) {
    window.zooniverse = {};
  }

  $ = window.jQuery;

  EventEmitter = (function() {
    var method, methodName;

    function EventEmitter() {}

    EventEmitter.proxy = function(method) {
      return $.proxy.apply($, (typeof method === 'function' ? [method, this] : [this, method]));
    };

    EventEmitter.on = function(eventName, handler) {
      var _ref1;
      if ((_ref1 = this.jQueryEventProxy) == null) {
        this.jQueryEventProxy = $({});
      }
      return this.jQueryEventProxy.on(eventName, this.proxy(handler));
    };

    EventEmitter.one = function(eventName, handler) {
      var _ref1;
      if ((_ref1 = this.jQueryEventProxy) == null) {
        this.jQueryEventProxy = $({});
      }
      return this.jQueryEventProxy.one(eventName, this.proxy(handler));
    };

    EventEmitter.off = function(eventName, handler) {
      var _ref1;
      if ((_ref1 = this.jQueryEventProxy) == null) {
        this.jQueryEventProxy = $({});
      }
      return this.jQueryEventProxy.off(eventName, this.proxy(handler));
    };

    EventEmitter.trigger = function(eventName, args) {
      var _base, _ref1, _ref2;
      if ((_ref1 = this.jQueryEventProxy) == null) {
        this.jQueryEventProxy = $({});
      }
      (_ref2 = this.jQueryEventProxy).trigger.apply(_ref2, arguments);
      return typeof (_base = this.constructor).trigger === "function" ? _base.trigger(eventName, [this].concat(args)) : void 0;
    };

    for (methodName in EventEmitter) {
      if (!__hasProp.call(EventEmitter, methodName)) continue;
      method = EventEmitter[methodName];
      EventEmitter.prototype[methodName] = method;
    }

    return EventEmitter;

  })();

  window.zooniverse.EventEmitter = EventEmitter;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EventEmitter;
  }

}).call(this);
