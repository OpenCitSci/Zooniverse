// Generated by CoffeeScript 1.3.3
(function() {
  var $, Api, ProxyFrame, _,
    __slice = [].slice;

  $ = require('jqueryify');

  _ = require('underscore/underscore');

  ProxyFrame = require('proxy_frame');

  Api = (function() {

    function Api() {}

    Api.requests = {};

    Api.ready = false;

    Api.proxy = void 0;

    Api.host = "" + window.location.protocol + "//" + window.location.host;

    Api.get = function() {
      return Api.request.apply(Api, ['get'].concat(__slice.call(arguments)));
    };

    Api.getJSON = function() {
      return Api.request.apply(Api, ['getJSON'].concat(__slice.call(arguments)));
    };

    Api.post = function() {
      return Api.request.apply(Api, ['post'].concat(__slice.call(arguments)));
    };

    Api.put = function() {
      return Api.request.apply(Api, ['put'].concat(__slice.call(arguments)));
    };

    Api["delete"] = function() {
      return Api.request.apply(Api, ['delete'].concat(__slice.call(arguments)));
    };

    Api.init = function() {
      if (Api.proxy) {
        return;
      }
      Api.proxy = new ProxyFrame(Api.host);
      Api.proxy.bind('load', Api.loaded);
      return Api.proxy.bind('response', Api.respond);
    };

    Api.loaded = function() {
      var id, request, _ref, _results;
      Api.ready = true;
      _ref = Api.requests;
      _results = [];
      for (id in _ref) {
        request = _ref[id];
        if (!request.processed) {
          _results.push(Api.process(id));
        }
      }
      return _results;
    };

    Api.request = function(type, url, data, done, fail) {
      var id, message;
      id = Api.nextId();
      if (typeof data === 'function') {
        fail = done;
        done = data;
        data = null;
      }
      message = {
        id: id,
        type: type,
        url: url,
        data: data,
        done: done,
        fail: fail
      };
      Api.requests[id] = message;
      if (Api.ready) {
        return Api.process(id);
      } else {
        return message.processed = false;
      }
    };

    Api.respond = function(ev, message) {
      var request;
      request = Api.requests[message.id];
      if (message.failure) {
        if (typeof request.fail === "function") {
          request.fail(message.response);
        }
      } else {
        if (typeof request.done === "function") {
          request.done(message.response);
        }
      }
      return delete Api.requests[message.id];
    };

    Api.process = function(id) {
      var message;
      Api.requests[id].processed = true;
      message = _(Api.requests[id]).pick('id', 'type', 'url', 'data');
      return Api.proxy.send(message);
    };

    Api.nextId = function() {
      return _.uniqueId('api-');
    };

    return Api;

  })();

  module.exports = Api;

}).call(this);
