// Generated by CoffeeScript 1.4.0
(function() {
  var $, Leaflet, Map,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  $ = require('jqueryify');

  Leaflet = (function() {
    try {
      return require('zooniverse/vendor/leaflet/leaflet-src');
    } catch (e) {
      console.warn('You should use Leaflet as a CommonJS module.');
      return window.L;
    }
  })();

  Map = (function() {

    Map.prototype.latitude = 41.9;

    Map.prototype.longitude = -87.6;

    Map.prototype.centerOffset = null;

    Map.prototype.zoom = 10;

    Map.prototype.className = '';

    Map.prototype.layers = null;

    Map.prototype.zoomControl = true;

    Map.prototype.scrollWheelZoom = false;

    Map.prototype.doubleClickZoom = false;

    Map.prototype.labels = null;

    Map.prototype.apiKey = '';

    Map.prototype.tilesId = 998;

    Map.prototype.map = null;

    function Map(params) {
      var param, url, value, _ref, _ref1, _ref2, _ref3, _ref4,
        _this = this;
      if (params == null) {
        params = {};
      }
      this.resize = __bind(this.resize, this);

      this.removeLabel = __bind(this.removeLabel, this);

      this.addLabel = __bind(this.addLabel, this);

      this.removeLayer = __bind(this.removeLayer, this);

      this.addLayer = __bind(this.addLayer, this);

      this.setZoom = __bind(this.setZoom, this);

      this.setCenter = __bind(this.setCenter, this);

      for (param in params) {
        if (!__hasProp.call(params, param)) continue;
        value = params[param];
        this[param] = value;
      }
      if (!this.apiKey) {
        throw new Error('Map class needs an apiKey!');
      }
      if ((_ref = this.centerOffset) == null) {
        this.centerOffset = [0.5, 0.5];
      }
      if ((_ref1 = this.el) == null) {
        this.el = $('<div class="map"></div>');
      }
      if (this.className) {
        this.el.addClass(this.className);
      }
      if ((_ref2 = this.layers) == null) {
        this.layers = [];
      }
      if (!(this.layers instanceof Array)) {
        this.layers = [this.layers];
      }
      if ((_ref3 = this.labels) == null) {
        this.labels = [];
      }
      if ((_ref4 = this.map) == null) {
        this.map = new Leaflet.Map(this.el.get(0), {
          center: new Leaflet.LatLng(this.latitude, this.longitude),
          zoom: this.zoom,
          layers: [new Leaflet.TileLayer("http://{s}.tile.cloudmade.com/" + this.apiKey + "/" + this.tilesId + "/256/{z}/{x}/{y}.png")].concat(__slice.call((function() {
              var _i, _len, _ref5, _results;
              _ref5 = this.layers;
              _results = [];
              for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
                url = _ref5[_i];
                _results.push(new Leaflet.TileLayer(url));
              }
              return _results;
            }).call(this))),
          scrollWheelZoom: this.scrollWheelZoom,
          doubleClickZoom: this.doubleClickZoom,
          attributionControl: false,
          zoomControl: this.zoomControl,
          worldCopyJump: false
        });
      }
      this.el.css({
        position: ''
      });
      this.setCenter(this.latitude, this.longitude);
      $(window).on('hashchange', function() {
        var x, y, _ref5;
        _ref5 = _this.map.getSize(), x = _ref5.x, y = _ref5.y;
        if (0 === x || 0 === y) {
          return setTimeout(_this.resize);
        }
      });
      setTimeout(this.resize);
    }

    Map.prototype.setCenter = function(lat, lng) {
      var bounds, ne, shift, sw;
      bounds = this.map.getBounds();
      ne = bounds.getNorthEast();
      sw = bounds.getSouthWest();
      shift = {
        lat: (ne.lat - sw.lat) * -(0.5 - this.centerOffset[1]),
        lng: (ne.lng - sw.lng) * +(0.5 - this.centerOffset[0])
      };
      return this.map.setView(new Leaflet.LatLng(lat + shift.lat, lng + shift.lng, true), this.map.getZoom());
    };

    Map.prototype.setZoom = function(zoom) {
      return this.map.setZoom(zoom);
    };

    Map.prototype.addLayer = function(url) {
      var layer;
      layer = new Leaflet.TileLayer(url);
      this.map.addLayer(layer);
      return layer;
    };

    Map.prototype.removeLayer = function(layer) {
      return this.map.removeLayer(layer);
    };

    Map.prototype.addLabel = function(lat, lng, html, radius) {
      var label, latLng;
      if (radius == null) {
        radius = 5;
      }
      latLng = new Leaflet.LatLng(lat, lng, true);
      label = new Leaflet.CircleMarker(latLng, {
        radius: radius
      }).addTo(this.map);
      this.labels.push(label);
      if (html) {
        label.bindPopup(html);
      }
      return label;
    };

    Map.prototype.removeLabel = function(label) {
      return this.map.removeLayer(label);
    };

    Map.prototype.resize = function() {
      return this.map.invalidateSize();
    };

    return Map;

  })();

  module.exports = Map;

}).call(this);
