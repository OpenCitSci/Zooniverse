// Generated by CoffeeScript 1.4.0
(function() {
  var Api, BaseController, TopBar, User, template, _base, _base1, _ref, _ref1, _ref2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.zooniverse) == null) {
    window.zooniverse = {};
  }

  if ((_ref1 = (_base = window.zooniverse).controllers) == null) {
    _base.controllers = {};
  }

  if ((_ref2 = (_base1 = window.zooniverse).views) == null) {
    _base1.views = {};
  }

  BaseController = zooniverse.controllers.BaseController || require('./base-controller');

  template = zooniverse.views.topBar || require('../views/top-bar');

  Api = zooniverse.api || require('../lib/api');

  User = zooniverse.models.User || require('../models/user');

  TopBar = (function(_super) {

    __extends(TopBar, _super);

    TopBar.prototype.className = 'zooniverse-top-bar';

    TopBar.prototype.template = template;

    TopBar.prototype.events = {
      'submit* form[name="sign-in"]': 'onSignInSubmit',
      'click* button[name="sign-up"]': 'onClickSignUp',
      'click* button[name="sign-out"]': 'onClickSignOut'
    };

    TopBar.prototype.elements = {
      'input[name="username"]': 'usernameInput',
      'input[name="password"]': 'passwordInput',
      'form[name="sign-in"] button[type="submit"]': 'signInButton',
      '.error-message': 'errorContainer',
      '.current-user-name': 'currentUserName'
    };

    function TopBar() {
      this.onSignInFailure = __bind(this.onSignInFailure, this);

      this.onSignInError = __bind(this.onSignInError, this);

      this.onUserChange = __bind(this.onUserChange, this);

      var _this = this;
      TopBar.__super__.constructor.apply(this, arguments);
      User.on('change', this.onUserChange);
      User.on('sign-in-error', this.onSignInError);
      User.on('sign-in-failure', function() {
        return _this.onSignInFailure;
      });
    }

    TopBar.prototype.onSignInSubmit = function() {
      var login,
        _this = this;
      this.el.addClass('logging-in');
      this.signInButton.attr({
        disabled: true
      });
      login = User.login({
        username: this.usernameInput.val(),
        password: this.passwordInput.val()
      });
      return login.always(function() {
        _this.el.removeClass('logging-in');
        return _this.signInButton.attr({
          disabled: false
        });
      });
    };

    TopBar.prototype.onClickSignUp = function() {
      return alert('TODO: Sign up dialog');
    };

    TopBar.prototype.onClickSignOut = function() {
      return User.logout();
    };

    TopBar.prototype.onUserChange = function(e, user) {
      this.el.toggleClass('signed-in', user != null);
      this.usernameInput.val('');
      this.passwordInput.val('');
      this.errorContainer.html('');
      return this.currentUserName.html((user != null ? user.name : void 0) || '');
    };

    TopBar.prototype.onSignInError = function(e, message) {
      return this.errorContainer.html(message);
    };

    TopBar.prototype.onSignInFailure = function() {
      return typeof console !== "undefined" && console !== null ? console.warn('SIGN IN FAILURE') : void 0;
    };

    return TopBar;

  })(BaseController);

  window.zooniverse.controllers.TopBar = TopBar;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = TopBar;
  }

}).call(this);
