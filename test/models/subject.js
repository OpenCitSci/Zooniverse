// Generated by CoffeeScript 1.4.0
(function() {
  var Api, Subject,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Api = zooniverse.Api;

  Subject = zooniverse.models.Subject;

  describe('Subject', function() {
    return describe('with a connected API', function() {
      this.api = new Api({
        project: 'test',
        host: "" + location.protocol + "//" + location.host,
        path: '/test/helpers/proxy#for-subject-tests'
      });
      describe('path', function() {
        afterEach(function() {
          return Subject.group = false;
        });
        it('knows its path without a groups', function() {
          return expect(Subject.path()).to.equal('/projects/test/subjects');
        });
        it('knows its path with any group', function() {
          Subject.group = true;
          return expect(Subject.path()).to.equal('/projects/test/groups/subjects');
        });
        return it('knows its path with a specific group', function() {
          Subject.group = 'PATH_ID';
          return expect(Subject.path()).to.equal('/projects/test/groups/PATH_ID/subjects');
        });
      });
      describe('fetch', function() {
        return it('can fetch more subjects', function(done) {
          return Subject.fetch(function() {
            if (Subject.count() === Subject.queueLength) {
              return done();
            }
          });
        });
      });
      return describe('next', function() {
        beforeEach(function() {
          var _results;
          _results = [];
          while (Subject.count() !== 0) {
            _results.push(Subject.first().destroy());
          }
          return _results;
        });
        it('destroys the current subject', function(done) {
          var instance;
          instance = new Subject;
          instance.select();
          Subject.one('fetch', function() {
            return done();
          });
          Subject.next();
          return expect(__indexOf.call(Subject.instances, instance) >= 0).to.be["false"];
        });
        it('can get the next subject', function(done) {
          return Subject.next(function() {
            console.log('next', arguments);
            if (Subject.current != null) {
              return done();
            }
          });
        });
        return it('fetches more subjects to refill its queue', function(done) {
          new Subject;
          new Subject;
          Subject.one('fetch', function() {
            if (Subject.count() === Subject.queueLength) {
              return done();
            }
          });
          return Subject.next();
        });
      });
    });
  });

}).call(this);
