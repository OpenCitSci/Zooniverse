// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = zooniverse.models.BaseModel;

  describe('BaseModel', function() {
    beforeEach(function() {
      this.ModelClass = (function(_super) {

        __extends(ModelClass, _super);

        function ModelClass() {
          return ModelClass.__super__.constructor.apply(this, arguments);
        }

        return ModelClass;

      })(BaseModel);
      return window.MC = this.ModelClass;
    });
    return it('keeps track of its instances', function() {
      var instance;
      expect(this.ModelClass.count()).to.equal(0);
      instance = new this.ModelClass;
      expect(this.ModelClass.instances[0]).to.equal(instance);
      expect(this.ModelClass.count()).to.equal(1);
      instance.destroy();
      return expect(this.ModelClass.count()).to.equal(0);
    });
  });

}).call(this);
