// Generated by CoffeeScript 1.4.0
(function() {
  var Api, User;

  Api = zooniverse.Api;

  User = zooniverse.models.User;

  describe('User', function() {
    describe('on a failed API', function() {
      before(function() {
        return this.api = new Api({
          project: 'test',
          host: "" + location.protocol + "//" + location.host,
          path: '/bad-path-for-user-tests',
          loadTimeout: 100
        });
      });
      beforeEach(function() {
        var _ref;
        if ((_ref = User.current) != null) {
          if (typeof _ref.destroy === "function") {
            _ref.destroy();
          }
        }
        return User.current = false;
      });
      return describe('checking the current user', function() {
        it('triggers "change" with no current user', function(done) {
          User.one('change', function() {
            if (User.current == null) {
              return done();
            }
          });
          return User.fetch();
        });
        return it('triggers "sign-in-error"', function(done) {
          User.one('sign-in-error', function() {
            return done();
          });
          return User.fetch();
        });
      });
    });
    return describe('on an available API', function() {
      before(function() {
        return this.api = new Api({
          project: 'test',
          host: "" + location.protocol + "//" + location.host,
          path: '/test/helpers/proxy#for-user-tests'
        });
      });
      beforeEach(function() {
        var _ref;
        if ((_ref = User.current) != null) {
          if (typeof _ref.destroy === "function") {
            _ref.destroy();
          }
        }
        return User.current = false;
      });
      describe('checking the current user when not signed in', function() {
        it('triggers "change" with no user', function(done) {
          User.one('change', function(e, user) {
            if (user === null) {
              return done();
            }
          });
          return User.fetch();
        });
        return it('triggers "sign-in-error"', function(done) {
          User.one('sign-in-error', function() {
            return done();
          });
          return User.fetch();
        });
      });
      describe('checking the current user when signed in', function() {
        return it('triggers "change" with the current user', function(done) {
          User.one('change', function(e, user) {
            if ((user != null) && user === User.current) {
              return done();
            }
          });
          return User.fetch({
            testSignedIn: true
          });
        });
      });
      describe('login', function() {
        describe('with a good username and password', function() {
          return it('triggers "change" with the current user', function(done) {
            User.one('change', function(e, user) {
              if ((user != null) && (User.current != null) && user === User.current) {
                return done();
              }
            });
            return User.login({
              username: 'clyde',
              password: 'clyde'
            }, console.info, console.warn);
          });
        });
        return describe('with a bad username or password', function() {
          it('triggers "change" with no user', function(done) {
            User.one('change', function(e, user) {
              if (user === null) {
                return done();
              }
            });
            return User.login({
              username: 'BAD',
              password: 'BAD'
            });
          });
          return it('triggers "sign-in-error"', function(done) {
            User.one('sign-in-error', function() {
              return done();
            });
            return User.login({
              username: 'BAD',
              password: 'BAD'
            });
          });
        });
      });
      describe('logout', function() {
        return it('triggers "change" with no current user', function(done) {
          User.one('change', function(e, user) {
            if (user === null) {
              return done();
            }
          });
          return User.logout();
        });
      });
      return describe('signup', function() {
        describe('when given insufficient data', function() {
          it('triggers "change" with no user', function(done) {
            User.one('change', function(e, user) {
              if (user === null) {
                return done();
              }
            });
            return User.signup({
              username: 'OKAY',
              password: 'OKAY'
            });
          });
          return it('triggers "sign-in-error"', function(done) {
            User.one('sign-in-error', function() {
              return done();
            });
            return User.signup({
              username: 'OKAY',
              password: 'OKAY'
            });
          });
        });
        return describe('when given all required data', function() {
          return it('triggers "change" with the current user', function(done) {
            User.one('change', function(e, user) {
              if ((user != null) && User.current === user) {
                return done();
              }
            });
            return User.signup({
              username: 'OKAY',
              password: 'OKAY',
              email: 'OKAY'
            });
          });
        });
      });
    });
  });

}).call(this);
