// Generated by CoffeeScript 1.3.3
(function() {
  var Form, User;

  Form = require('./controllers/base_form');

  User = require('../models/user');

  describe('SignInForm', function() {
    beforeEach(function() {
      return this.signInForm = new Form.SignInForm;
    });
    describe('#onSubmit', function() {
      beforeEach(function() {
        this.signInForm.usernameField.val('test');
        this.signInForm.passwordField.val('password');
        return this.signInForm.onSubmit();
      });
      it('should show a progress indicator', function() {
        var progress;
        progress = this.signInForm.progress.css('display');
        return expect(progress).not.toBe('none');
      });
      it('forgets any previous errors', function() {
        var errors;
        errors = this.signInForm.errors.text();
        return expect(errors).toBe("");
      });
      return it('submits a username and password to the authentication iframe', function() {
        spyOn(User, 'login').andCallThrough();
        this.signInForm.onSubmit();
        return expect(User.login).toHaveBeenCalledWith({
          username: 'test',
          password: 'password'
        });
      });
    });
    describe('#onErrror', function() {
      beforeEach(function() {
        return this.signInForm.onError("Test Error");
      });
      it('shows an error', function() {
        var errors;
        console.log(this.signInForm.errors);
        errors = this.signInForm.errors.text();
        return expect(errors).toBe("Test Error");
      });
      return it('hides the progress indicator', function() {
        var progress;
        progress = this.signInForm.progress.css('display');
        return expect(progress).toBe('none');
      });
    });
    return describe('#onSignIn', function() {
      beforeEach(function() {
        return this.signInForm.onSignIn();
      });
      return it('should hide the progress', function() {
        var progress;
        progress = this.signInForm.progress.css('display');
        return expect(progress).toBe('none');
      });
    });
  });

  describe('SignUpForm', function() {
    beforeEach(function() {
      return this.signUpForm = new Form.SignUpForm;
    });
    return describe('#onSumbit', function() {
      return beforeEach(function() {
        this.signInForm.usernameField.val('test');
        this.signInForm.passwordField.val('password');
        this.signInForm.passwordConfirmField.val('password');
        return this.signInForm.emailField.val('test@example.com');
      });
    });
  });

}).call(this);
