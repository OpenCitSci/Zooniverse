// Generated by CoffeeScript 1.3.3
(function() {
  var Api, User;

  User = require('./models/user');

  Api = require('./api');

  describe('User', function() {
    beforeEach(function() {
      return Api.init();
    });
    describe('Not logged in', function() {
      return it('should not fetch a user', function() {
        var userCheck;
        userCheck = false;
        User.fetch().always(function() {
          return userCheck = true;
        });
        waitsFor(function() {
          return userCheck;
        });
        return runs(function() {
          return expect(User.current).toBe(null);
        });
      });
    });
    describe('Logged in', function() {
      beforeEach(function() {
        var loggedIn;
        loggedIn = false;
        Api.getJSON('/login', function() {
          return loggedIn = true;
        });
        return waitsFor(function() {
          return loggedIn;
        });
      });
      afterEach(function() {
        var loggedOut;
        loggedOut = false;
        Api.getJSON('/logout', function() {
          return loggedOut = true;
        });
        return waitsFor(function() {
          return loggedOut;
        });
      });
      return it('should fetch a user', function() {
        User.fetch().always(function() {
          return expect(User.current.id).toBe('4fff22b8c4039a0901000002');
        });
        return waitsFor(function() {
          return User.current;
        });
      });
    });
    return describe('#login', function() {
      beforeEach(function() {
        return console.log('this gets called');
      });
      describe('with valid password', function() {
        return it('should set current user to the login', function() {
          return User.login({
            username: 'user',
            password: 'password'
          }).always(function() {
            return expect(User.current.id).toBe('4fff22b8c4039a0901000002');
          });
        });
      });
      return describe('with invalid password', function() {
        return it('should set the current user to null', function() {
          return User.login({
            username: 'user',
            password: 'password'
          }).always(function() {
            return expect(User.current.id).toBeNull;
          });
        });
      });
    });
  });

}).call(this);
