// Generated by CoffeeScript 1.4.0
(function() {
  var LoginForm, User;

  LoginForm = require('./controllers/login_form');

  User = require('../models/user');

  describe('LoginForm', function() {
    beforeEach(function() {
      return this.loginForm = new LoginForm;
    });
    describe('#signIn', function() {
      beforeEach(function() {
        return this.loginForm.signIn();
      });
      it('should hide the signup form', function() {
        var signup;
        signup = this.loginForm.signUpContainer.css('display');
        return expect(signup).toBe('none');
      });
      it('should display the signin form', function() {
        var signin;
        signin = this.loginForm.signInContainer.css('display');
        return expect(signin).not.toBe('none');
      });
      return it('should hide the sign in button', function() {
        var signinButton;
        signinButton = this.loginForm.signInButton.css('display');
        return expect(signinButton).toBe('none');
      });
    });
    describe('#signUp', function() {
      beforeEach(function() {
        return this.loginForm.signUp();
      });
      it('should hide the signin form', function() {
        var signin;
        signin = this.loginForm.signInContainer.css('display');
        return expect(signin).toBe('none');
      });
      it('should display the signup form', function() {
        var signup;
        signup = this.loginForm.signUpContainer.css('display');
        return expect(signup).not.toBe('none');
      });
      return it('should hide the sign up button', function() {
        var signupButton;
        signupButton = this.loginForm.signUpButton.css('display');
        return expect(signupButton).toBe('none');
      });
    });
    return describe('#onSignIn', function() {
      describe('a user is signed in', function() {
        beforeEach(function() {
          User.current = new User;
          return this.loginForm.onSignIn();
        });
        it('should have a "signed-in" class', function() {
          return expect(this.loginForm.el.hasClass('signed-in')).toBeTruthy();
        });
        it('should hide all sign in forms', function() {
          var signins;
          signins = this.loginForm.signInForms.css('display');
          return expect(signins).toBe('none');
        });
        it('should hide all pickers', function() {
          var pickers;
          pickers = this.loginForm.signInPickers.css('display');
          return expect(pickers).toBe('none');
        });
        return it('should display the signout form', function() {
          var signout;
          signout = this.loginForm.signOutContainer.css('display');
          return expect(signout).not.toBe('none');
        });
      });
      return describe('no user is signed in', function() {
        beforeEach(function() {
          return User.current = null;
        });
        it('should call #signIn', function() {
          spyOn(this.loginForm, 'signIn');
          this.loginForm.onSignIn();
          return expect(this.loginForm.signIn).toHaveBeenCalled();
        });
        it('should not have a "signed-in" class', function() {
          return expect(this.loginForm.el.hasClass('signed-in')).toBe(false);
        });
        return it('should hide signout form', function() {
          var signout;
          signout = this.loginForm.signOutContainer.css('display');
          return expect(signout).toBe('none');
        });
      });
    });
  });

}).call(this);
