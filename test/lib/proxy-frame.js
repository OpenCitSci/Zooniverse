// Generated by CoffeeScript 1.4.0
(function() {
  var ProxyFrame;

  ProxyFrame = zooniverse.ProxyFrame;

  describe('ProxyFrame', function() {
    it('creates a new iframe', function() {
      this.proxyFrame = new ProxyFrame({
        host: "" + location.protocol + "//" + location.host,
        path: '/test/helpers/proxy'
      });
      return expect(this.proxyFrame.el.parent()).to.match('body');
    });
    it('queues requests before it\'s ready', function() {
      this.proxyFrame.send({
        url: '/marco'
      });
      this.inQueue = this.proxyFrame.queue[0];
      expect(this.inQueue.url).to.equal('/marco');
      return expect(this.proxyFrame.deferreds[this.inQueue.id]).to.exist;
    });
    it('marks itself ready', function(done) {
      if (this.proxyFrame.ready) {
        return done();
      } else {
        return this.proxyFrame.on('ready', function() {
          return done();
        });
      }
    });
    it('resolves deferreds in the queue when ready', function(done) {
      return this.proxyFrame.deferreds[this.inQueue.id].done(function() {
        return done();
      });
    });
    it('can send a request and receives a response', function(done) {
      return this.proxyFrame.send({
        url: '/marco'
      }, function(response) {
        if (response === 'polo') {
          return done();
        }
      });
    });
    it('removes its iframe when destroyed', function() {
      this.proxyFrame.destroy();
      return expect(this.proxyFrame.el.parent()).not.to.exist;
    });
    return describe('when the back end is unavailable', function() {
      it('marks itself failed', function(done) {
        var _this = this;
        this.badProxyFrame = new ProxyFrame({
          host: "" + location.protocol + "//" + location.host,
          path: '/this-doesnt-exist',
          loadTimeout: 100
        });
        return setTimeout((function() {
          if (_this.badProxyFrame.failed) {
            return done();
          }
        }), 200);
      });
      return it('rejects attempted sends', function(done) {
        return this.badProxyFrame.send({
          url: '/marco'
        }, null, function() {
          return done();
        });
      });
    });
  });

}).call(this);
