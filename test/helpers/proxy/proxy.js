// Generated by CoffeeScript 1.4.0
(function() {
  var $, RECENTS, SUBJECTS, USERS, i, name, subject, _i, _len, _ref;

  $ = window.jQuery;

  SUBJECTS = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 50; i = ++_i) {
      _results.push({
        id: "SUBJECT_" + i,
        zooniverse_id: "SUBJECT_" + i + "_ZID",
        coords: [0, 0],
        location: {
          standard: '//placehold.it/1x1.png'
        },
        metadata: {},
        workflow_ids: ['WORKFLOW_ID']
      });
    }
    return _results;
  })();

  RECENTS = (function() {
    var _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = SUBJECTS.length; _i < _len; i = ++_i) {
      subject = SUBJECTS[i];
      _results.push({
        id: "RECENT_" + i,
        project_id: 'PROJECT_ID',
        workflow_id: subject.workflow_ids[0],
        subjects: [subject],
        created_at: (new Date).toUTCString()
      });
    }
    return _results;
  })();

  USERS = {};

  _ref = ['blinky', 'pinky', 'inky', 'clyde'];
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    name = _ref[i];
    USERS[name] = {
      success: true,
      id: name.toUpperCase(),
      zooniverse_id: "" + (name.toUpperCase()) + "_ZID",
      api_key: "" + (name.toUpperCase()) + "_API_KEY",
      name: name,
      password: name,
      project: {
        classification_count: RECENTS.length,
        tutorial_done: false
      }
    };
  }

  $.mockjax({
    url: '/marco',
    response: function() {
      return this.responseText = JSON.stringify('polo');
    }
  });

  $.mockjax({
    url: "/projects/test/current_user",
    response: function(settings) {
      var _ref1;
      return this.responseText = JSON.stringify(((_ref1 = settings.data) != null ? _ref1.testSignedIn : void 0) === true ? USERS.clyde : {
        success: false
      });
    }
  });

  $.mockjax({
    url: "/projects/test/login",
    response: function(settings) {
      var password, username, _ref1, _ref2;
      username = (_ref1 = settings.data) != null ? _ref1.username : void 0;
      password = (_ref2 = settings.data) != null ? _ref2.password : void 0;
      return this.responseText = JSON.stringify(username in USERS && password === USERS[username].password ? USERS[username] : {
        success: false,
        message: 'Invalid username or password'
      });
    }
  });

  $.mockjax({
    url: "/projects/test/logout",
    response: function() {
      return this.responseText = JSON.stringify({
        success: true
      });
    }
  });

  $.mockjax({
    url: "/projects/test/signup",
    response: function(settings) {
      var email, password, username, _ref1, _ref2, _ref3;
      username = (_ref1 = settings.data) != null ? _ref1.username : void 0;
      password = (_ref2 = settings.data) != null ? _ref2.password : void 0;
      email = (_ref3 = settings.data) != null ? _ref3.email : void 0;
      return this.responseText = JSON.stringify(username && password && email ? USERS.clyde : {
        success: false,
        message: 'Username, password, and email are required'
      });
    }
  });

  $.mockjax({
    url: '/projects/test/subjects',
    response: function(settings) {
      var limit, _ref1;
      limit = (_ref1 = settings.data) != null ? _ref1.limit : void 0;
      if (limit == null) {
        limit = 5;
      }
      return this.responseText = JSON.stringify(SUBJECTS.splice(0, limit));
    }
  });

  $.mockjax({
    type: 'POST',
    url: '/projects/test/workflows/*/classifications',
    response: function(settings) {
      var classification, _ref1;
      classification = (_ref1 = settings.data) != null ? _ref1.classification : void 0;
      return this.responseText = JSON.stringify({
        subject_ids: classification.subject_ids,
        success: true
      });
    }
  });

  $.mockjax({
    url: '/projects/test/users/*/recents',
    response: function(settings) {
      var page, per_page, start, _ref1, _ref2;
      page = ((_ref1 = settings.data) != null ? _ref1.page : void 0) || 1;
      per_page = ((_ref2 = settings.data) != null ? _ref2.per_page : void 0) || 10;
      start = (page * per_page) - per_page;
      return this.responseText = JSON.stringify(RECENTS.slice(start, start + per_page));
    }
  });

  $(window).on('message', function(_arg) {
    var beforeSend, data, e, headers, id, recipient, request, type, url, _ref1;
    e = _arg.originalEvent;
    recipient = e.origin;
    _ref1 = JSON.parse(e.data), id = _ref1.id, type = _ref1.type, url = _ref1.url, data = _ref1.data, headers = _ref1.headers;
    if (headers == null) {
      headers = {};
    }
    beforeSend = function(xhr) {
      var header, value, _results;
      headers['X-CSRF-Token'] = $('meta[name="csrf-token"]').attr('content');
      _results = [];
      for (header in headers) {
        value = headers[header];
        _results.push(xhr.setRequestHeader(header, value));
      }
      return _results;
    };
    request = $.ajax({
      type: type,
      beforeSend: beforeSend,
      url: url,
      data: data,
      dataType: 'json'
    });
    request.done(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response
      }), recipient);
    });
    return request.fail(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response,
        failure: true
      }), recipient);
    });
  });

  setTimeout(function() {
    return parent.postMessage(JSON.stringify({
      id: 'READY',
      success: true,
      response: +(new Date)
    }), '*');
  });

}).call(this);
