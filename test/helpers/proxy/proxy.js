// Generated by CoffeeScript 1.4.0
(function() {
  var $, VALID_USER_RESPONSE, i, sinon, subjects;

  sinon = window.sinon;

  $ = window.jQuery;

  $.mockjax({
    url: '/marco',
    response: function() {
      return this.responseText = JSON.stringify('polo');
    }
  });

  VALID_USER_RESPONSE = {
    success: true,
    id: 'ID',
    zooniverse_id: 'ZOONIVERSE_ID',
    api_key: 'API_KEY',
    name: 'tester',
    project: {
      tutorial_done: false
    }
  };

  $.mockjax({
    url: "/projects/test/current_user",
    response: function(settings) {
      var _ref;
      return this.responseText = JSON.stringify(((_ref = settings.data) != null ? _ref.testSignedIn : void 0) === true ? VALID_USER_RESPONSE : {
        success: false
      });
    }
  });

  $.mockjax({
    url: "/projects/test/login",
    response: function(settings) {
      var _ref, _ref1;
      return this.responseText = JSON.stringify(((_ref = settings.data) != null ? _ref.username : void 0) === 'GOOD' && ((_ref1 = settings.data) != null ? _ref1.password : void 0) === 'GOOD' ? VALID_USER_RESPONSE : {
        success: false,
        message: 'Invalid username or password'
      });
    }
  });

  $.mockjax({
    url: "/projects/test/logout",
    response: function() {
      return this.responseText = JSON.stringify({
        success: true
      });
    }
  });

  $.mockjax({
    url: "/projects/test/signup",
    response: function(settings) {
      var _ref, _ref1;
      return this.responseText = JSON.stringify(((_ref = settings.data) != null ? _ref.username : void 0) && ((_ref1 = settings.data) != null ? _ref1.password : void 0) && email ? VALID_USER_RESPONSE : {
        success: false,
        message: 'Username, password, and email are required'
      });
    }
  });

  subjects = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 10; i = ++_i) {
      _results.push({
        id: ("" + i + "_") + ("" + (Math.random())).split('.')[1],
        zooniverse_id: ("" + (Math.random())).split('.')[1],
        coords: [0, 0],
        location: {
          standard: '//placehold.it/1x1.png'
        },
        metadata: {}
      });
    }
    return _results;
  })();

  $.mockjax({
    url: '/projects/test/subjects',
    response: function(settings) {
      var limit, _ref;
      limit = (_ref = settings.data) != null ? _ref.limit : void 0;
      if (limit == null) {
        limit = 5;
      }
      return this.responseText = JSON.stringify(subjects.splice(0, limit));
    }
  });

  $(window).on('message', function(_arg) {
    var beforeSend, data, e, headers, id, recipient, request, type, url, _ref;
    e = _arg.originalEvent;
    recipient = e.origin;
    _ref = JSON.parse(e.data), id = _ref.id, type = _ref.type, url = _ref.url, data = _ref.data, headers = _ref.headers;
    if (headers == null) {
      headers = {};
    }
    beforeSend = function(xhr) {
      var header, value, _results;
      headers['X-CSRF-Token'] = $('meta[name="csrf-token"]').attr('content');
      _results = [];
      for (header in headers) {
        value = headers[header];
        _results.push(xhr.setRequestHeader(header, value));
      }
      return _results;
    };
    request = $.ajax({
      type: type,
      beforeSend: beforeSend,
      url: url,
      data: data,
      dataType: 'json'
    });
    request.done(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response
      }), recipient);
    });
    return request.fail(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response,
        failure: true
      }), recipient);
    });
  });

  setTimeout(function() {
    return parent.postMessage(JSON.stringify({
      id: 'READY',
      response: +(new Date)
    }), '*');
  });

}).call(this);
