// Generated by CoffeeScript 1.4.0
(function() {
  var $, VALID_USER_RESPONSE, sinon;

  sinon = window.sinon;

  $ = window.jQuery;

  $.mockjax({
    url: '/marco',
    response: function() {
      return this.responseText = JSON.stringify('polo');
    }
  });

  VALID_USER_RESPONSE = {
    success: true,
    id: 'ID',
    zooniverse_id: 'ZOONIVERSE_ID',
    api_key: 'API_KEY',
    name: 'tester'
  };

  $.mockjax({
    url: "/projects/test/current_user",
    response: function(_arg) {
      var testSignedIn;
      testSignedIn = _arg.data.testSignedIn;
      return this.responseText = JSON.stringify(testSignedIn === true ? VALID_USER_RESPONSE : {
        success: false
      });
    }
  });

  $.mockjax({
    url: "/projects/test/login",
    response: function(_arg) {
      var password, username, _ref;
      _ref = _arg.data, username = _ref.username, password = _ref.password;
      return this.responseText = JSON.stringify(username === 'GOOD' && password === 'GOOD' ? VALID_USER_RESPONSE : {
        success: false,
        message: 'Invalid username or password'
      });
    }
  });

  $.mockjax({
    url: "/projects/test/logout",
    response: function() {
      return this.responseText = JSON.stringify({
        success: true
      });
    }
  });

  $.mockjax({
    url: "/projects/test/signup",
    response: function(_arg) {
      var email, password, username, _ref;
      _ref = _arg.data, username = _ref.username, password = _ref.password, email = _ref.email;
      return this.responseText = JSON.stringify(username && password && email ? VALID_USER_RESPONSE : {
        success: false,
        message: 'Username, password, and email are required'
      });
    }
  });

  $.mockjax({
    url: '/projects/test/subjects',
    response: function(_arg) {
      var i, limit, subjects;
      limit = _arg.data.limit;
      if (limit == null) {
        limit = 5;
      }
      subjects = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= limit ? _i < limit : _i > limit; i = 0 <= limit ? ++_i : --_i) {
          _results.push({
            id: ("" + i + "_" + (Math.random())).split('.')[1],
            zooniverse_id: ("" + (Math.random())).split('.')[1],
            coords: [0, 0],
            location: {
              standard: '//placehold.it/1x1.png'
            },
            metadata: {}
          });
        }
        return _results;
      })();
      return this.responseText = JSON.stringify(subjects);
    }
  });

  $(window).on('message', function(_arg) {
    var beforeSend, data, e, headers, id, recipient, request, type, url, _ref;
    e = _arg.originalEvent;
    recipient = e.origin;
    _ref = JSON.parse(e.data), id = _ref.id, type = _ref.type, url = _ref.url, data = _ref.data, headers = _ref.headers;
    if (headers == null) {
      headers = {};
    }
    beforeSend = function(xhr) {
      var header, value, _results;
      headers['X-CSRF-Token'] = $('meta[name="csrf-token"]').attr('content');
      _results = [];
      for (header in headers) {
        value = headers[header];
        _results.push(xhr.setRequestHeader(header, value));
      }
      return _results;
    };
    request = $.ajax({
      type: type,
      beforeSend: beforeSend,
      url: url,
      data: data,
      dataType: 'json'
    });
    request.done(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response
      }), recipient);
    });
    return request.fail(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response,
        failure: true
      }), recipient);
    });
  });

}).call(this);
