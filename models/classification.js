// Generated by CoffeeScript 1.4.0
(function() {
  var $, Api, BaseModel, Classification, _base, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  if ((_ref = window.zooniverse) == null) {
    window.zooniverse = {};
  }

  if ((_ref1 = (_base = window.zooniverse).models) == null) {
    _base.models = {};
  }

  BaseModel = zooniverse.models.BaseModel || require('./base-model');

  Api = zooniverse.Api || require('../lib/api');

  $ = window.jQuery;

  Classification = (function(_super) {

    __extends(Classification, _super);

    Classification.localClassifications = null;

    Classification.sentThisSession = 0;

    Classification.prototype.subject = null;

    Classification.prototype.annotations = null;

    Classification.prototype.favorite = false;

    Classification.prototype.started = null;

    Classification.prototype.agent = null;

    function Classification() {
      var _ref2;
      Classification.__super__.constructor.apply(this, arguments);
      if ((_ref2 = this.annotations) == null) {
        this.annotations = [];
      }
      this.started = (new Date).toUTCString();
      this.agent = window.navigator.userAgent;
    }

    Classification.prototype.annotate = function(annotation) {
      return this.annotations.push(annotation);
    };

    Classification.prototype.toJSON = function() {
      var output;
      output = {
        classification: {
          subject_ids: [this.subject.id],
          annotations: this.annotations.concat([
            {
              started: this.started
            }, {
              agent: this.agent
            }
          ])
        }
      };
      if (this.favorite) {
        output.favorite = true;
      }
      return output;
    };

    Classification.prototype.send = function(done, fail) {
      var asJSON, post, url, _ref2,
        _this = this;
      if (!(this.subject.metadata.tutorial || this.subject.metadata.empty)) {
        this.constructor.sentThisSession += 1;
      }
      url = "/projects/" + Api.current.project + "/workflows/" + this.subject.workflow_ids[0] + "/classifications";
      asJSON = this.toJSON();
      post = (_ref2 = Api.current).post.apply(_ref2, [url, asJSON].concat(__slice.call(arguments)));
      post.done(function() {});
      post.fail(function() {
        var _base1, _ref3;
        if ((_ref3 = (_base1 = _this.constructor).localClassifications) == null) {
          _base1.localClassifications = JSON.parse(localStorage.getItem('pending-classifications') || '[]');
        }
        _this.constructor.localClassifications.push(asJSON);
        localStorage.setItem('pending-classifications', JSON.stringify(_this.constructor.localClassifications));
        if (typeof console !== "undefined" && console !== null) {
          console.warn("Post failed! " + _this.constructor.localClassifications.length + " pending");
        }
        return _this.trigger('pending');
      });
      return this.trigger('send');
    };

    return Classification;

  })(BaseModel);

  window.zooniverse.models.Classification = Classification;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Classification;
  }

}).call(this);
